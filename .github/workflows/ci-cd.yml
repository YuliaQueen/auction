name: CI/CD

on:
  push:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Build and push Docker images
        run: |
          IMAGE_TAG="${GITHUB_REF##*/}-${{ github.run_number }}"
          if [ "$IMAGE_TAG" = "-${{ github.run_number }}" ]; then
            IMAGE_TAG="latest"
          fi
          LOWERCASE_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          REGISTRY="ghcr.io/${LOWERCASE_REPO}"

          docker build --pull --file=gateway/docker/production/nginx/Dockerfile --tag=${REGISTRY}/auction-gateway:${IMAGE_TAG} gateway/docker
          docker build --pull --file=frontend/docker/production/nginx/Dockerfile --tag=${REGISTRY}/auction-frontend:${IMAGE_TAG} frontend
          docker build --pull --file=api/docker/production/php-fpm/Dockerfile --tag=${REGISTRY}/auction-api-php-fpm:${IMAGE_TAG} api
          docker build --pull --file=api/docker/production/nginx/Dockerfile --tag=${REGISTRY}/auction-api:${IMAGE_TAG} api

          docker push ${REGISTRY}/auction-gateway:${IMAGE_TAG}
          docker push ${REGISTRY}/auction-frontend:${IMAGE_TAG}
          docker push ${REGISTRY}/auction-api-php-fpm:${IMAGE_TAG}
          docker push ${REGISTRY}/auction-api:${IMAGE_TAG}

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        env:
          GH_PAT: ${{ secrets.PAT }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: GH_PAT
          script: |
            # Аутентификация в ghcr.io
            echo $GH_PAT | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Проверка статуса аутентификации
            if [ $? -ne 0 ]; then
              echo "Ошибка аутентификации в ghcr.io"
              exit 1
            fi

            IMAGE_TAG="${GITHUB_REF##*/}-${{ github.run_number }}"
            if [ "$IMAGE_TAG" = "-${{ github.run_number }}" ]; then
              IMAGE_TAG="latest"
            fi

            LOWERCASE_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            REGISTRY="ghcr.io/${LOWERCASE_REPO}"

            DEPLOY_DIR="/home/deploy/apps/site_${{ github.run_number }}"
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR

            echo "COMPOSE_PROJECT_NAME=auction" > .env
            echo "REGISTRY=${REGISTRY}" >> .env
            echo "IMAGE_TAG=${IMAGE_TAG}" >> .env

            # Вывод переменных окружения для отладки
            echo "Используемые переменные окружения:"
            cat .env

            # Получение docker-compose.yml
            curl -H "Authorization: token $GH_PAT" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose-production.yml \
                 -L "https://api.github.com/repos/${{ github.repository }}/contents/docker-compose-production.yml"

            echo "Содержимое docker-compose-production.yml:"
            cat docker-compose-production.yml

            echo "Проверка доступности образов:"
            docker pull ${REGISTRY}/auction-gateway:${IMAGE_TAG}
            docker pull ${REGISTRY}/auction-frontend:${IMAGE_TAG}
            docker pull ${REGISTRY}/auction-api:${IMAGE_TAG}
            docker pull ${REGISTRY}/auction-api-php-fpm:${IMAGE_TAG}

            if [ $? -eq 0 ]; then
              echo "Образы успешно загружены. Продолжаем деплой."
              docker-compose -f docker-compose-production.yml up -d
              echo "Проверка статуса контейнеров:"
              docker-compose -f docker-compose-production.yml ps
            else
              echo "Не удалось загрузить образы. Проверьте права доступа и наличие образов в репозитории."
              exit 1
            fi