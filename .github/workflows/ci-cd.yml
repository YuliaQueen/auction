name: CI/CD

on:
  push:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Build and push Docker images
        run: |
          IMAGE_TAG="${GITHUB_REF##*/}-${{ github.run_number }}"
          LOWERCASE_IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build --pull --file=gateway/docker/production/nginx/Dockerfile --tag=${REGISTRY}/${LOWERCASE_IMAGE_NAME}-gateway:${IMAGE_TAG} gateway/docker
          docker build --pull --file=frontend/docker/production/nginx/Dockerfile --tag=${REGISTRY}/${LOWERCASE_IMAGE_NAME}-frontend:${IMAGE_TAG} frontend
          docker build --pull --file=api/docker/production/php-fpm/Dockerfile --tag=${REGISTRY}/${LOWERCASE_IMAGE_NAME}-api-php-fpm:${IMAGE_TAG} api
          docker build --pull --file=api/docker/production/nginx/Dockerfile --tag=${REGISTRY}/${LOWERCASE_IMAGE_NAME}-api:${IMAGE_TAG} api
          docker push ${REGISTRY}/${LOWERCASE_IMAGE_NAME}-gateway:${IMAGE_TAG}
          docker push ${REGISTRY}/${LOWERCASE_IMAGE_NAME}-frontend:${IMAGE_TAG}
          docker push ${REGISTRY}/${LOWERCASE_IMAGE_NAME}-api-php-fpm:${IMAGE_TAG}
          docker push ${REGISTRY}/${LOWERCASE_IMAGE_NAME}-api:${IMAGE_TAG}

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.HOST }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            IMAGE_TAG="${GITHUB_REF##*/}-${{ github.run_number }}"
            LOWERCASE_IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            DEPLOY_DIR="/home/deploy/apps/site_${{ github.run_number }}"
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR
            echo "COMPOSE_PROJECT_NAME=auction" >> .env
            echo "REGISTRY=${{ env.REGISTRY }}/${LOWERCASE_IMAGE_NAME}" >> .env
            echo "IMAGE_TAG=${IMAGE_TAG}" >> .env

            echo "Текущая директория: $(pwd)"
            echo "Содержимое текущей директории:"
            ls -la

            echo "Попытка получить содержимое файла через GitHub API..."
            if curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3.raw" -o docker-compose-production.yml -L https://api.github.com/repos/${{ github.repository }}/contents/docker-compose-production.yml; then
              echo "docker-compose-production.yml успешно получен"
              cat docker-compose-production.yml
            else
              echo "Ошибка при получении docker-compose-production.yml. Проверьте наличие файла в репозитории и права доступа."
              echo "Статус выполнения curl: $?"
              exit 1
            fi

            if [ -f "docker-compose-production.yml" ]; then
              echo "Файл docker-compose-production.yml найден. Продолжаем деплой."
              docker-compose -f docker-compose-production.yml pull
              docker-compose -f docker-compose-production.yml down
              docker-compose -f docker-compose-production.yml up -d
              cd /home/deploy/apps
              rm -f site
              ln -sr $DEPLOY_DIR site
            else
              echo "Файл docker-compose-production.yml не найден. Деплой не может быть выполнен."
              exit 1
            fi